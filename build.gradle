plugins {
    id "java"
}

base {
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    group = project.maven_group ?: rootProject.maven_group
    archivesName = project.maven_name ?: rootProject.maven_name
    version = project.maven_version ?: rootProject.maven_version
}

configurations {
    include

    implementation.extendsFrom include
    api.extendsFrom include
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
    maven {
        name = "ViaVersion"
        url "https://repo.viaversion.com"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "GeyserMC Main"
        url = "https://repo.opencollab.dev/main/"
    }
    maven {
        name = "Sonatype Snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name = "Sonatype Snapshots 2"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation "net.raphimc:ViaProxy:3.0.21"

    include "org.geysermc.geyser:core:latest.integration"
}

processResources {
    inputs.property "version", project.version

    filesMatching("viaproxy.yml") {
        expand "version": project.version
    }
}

jar {
    dependsOn configurations.include
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.include.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"

        // Remove libraries already included in ViaProxy to prevent class loading issues
        // Should be excluded in the dependencies block, but that doesn't work for some reason
        exclude "io/netty/"
        exclude "org/slf4j/"
        exclude "org/objectweb/asm/"
        exclude "com/google/common/"
        exclude "com/google/gson/"
    }

    from("LICENSE") {
        rename { "${it}_${project.name ?: rootProject.name}" }
    }
}
